{
  "address": "0x0dCfBFA6FBB7c39005C53DaD776fCC4A87a33f87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cil_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "multiSig_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountBlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "OfferCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "offerKey",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "terms",
          "type": "string"
        }
      ],
      "name": "OfferCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "OfferReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "price",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "minAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "maxAmount",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "priceType",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "paymentMethod",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "terms",
          "type": "string"
        }
      ],
      "name": "PositionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "PositionUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "cancelOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cil",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cilPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cilStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "string",
          "name": "terms",
          "type": "string"
        }
      ],
      "name": "createOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "price",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "amount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "minAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "maxAmount",
              "type": "uint128"
            },
            {
              "internalType": "bool",
              "name": "priceType",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "paymentMethod",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "internalType": "struct MarketPlace.PositionCreateParam",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "terms",
          "type": "string"
        }
      ],
      "name": "createPosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "decreasePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "forceCancelOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "forceRemovePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCilPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getOfferKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "paymentMethod",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "price",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "minAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "maxAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "getPositionKey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getStakedCil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "increasePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cilStaking_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cilPair_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ethPricefeed_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isBlocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiSig",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "offers",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "positionKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "released",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canceled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "price",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "minAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "maxAmount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "offerredAmount",
          "type": "uint128"
        },
        {
          "internalType": "bool",
          "name": "priceType",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "paymentMethod",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pricefeeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "releaseOffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pricefeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2dd3213bb66b3e2205a7d2e1f76cacad2f88b5f63e193e46b89441cb2ec4f70e",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0x0dCfBFA6FBB7c39005C53DaD776fCC4A87a33f87",
    "transactionIndex": 61,
    "gasUsed": "2876119",
    "logsBloom": "0x
    "blockHash": "0x4e550adc7ff036dbf2288e9ed5803e8a3b4f7416fead87c749e221721ecdeab4",
    "transactionHash": "0x2dd3213bb66b3e2205a7d2e1f76cacad2f88b5f63e193e46b89441cb2ec4f70e",
    "logs": [
      {
        "transactionIndex": 61,
        "blockNumber": 8493388,
        "transactionHash": "0x2dd3213bb66b3e2205a7d2e1f76cacad2f88b5f63e193e46b89441cb2ec4f70e",
        "address": "0x0dCfBFA6FBB7c39005C53DaD776fCC4A87a33f87",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5ca36c9873d61bc28c117bd470981ef6647a685"
        ],
        "data": "0x",
        "logIndex": 166,
        "blockHash": "0x4e550adc7ff036dbf2288e9ed5803e8a3b4f7416fead87c749e221721ecdeab4"
      }
    ],
    "blockNumber": 8493388,
    "cumulativeGasUsed": "9538122",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x18295f0562A3915459A81EaAe246abf483eB2532",
    "0x5C29Ac1d01aE85Bd93D1Cc1C457c0d4aed46C0AF"
  ],
  "numDeployments": 1,
  "solcInputHash": "ab35409c4a0e8936ad9663afc5b60def",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cil_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multiSig_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountBlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"OfferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"offerKey\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"terms\",\"type\":\"string\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"OfferReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"minAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"maxAmount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"priceType\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"paymentMethod\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"terms\",\"type\":\"string\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"PositionUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cilPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cilStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"string\",\"name\":\"terms\",\"type\":\"string\"}],\"name\":\"createOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"priceType\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"paymentMethod\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct MarketPlace.PositionCreateParam\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"terms\",\"type\":\"string\"}],\"name\":\"createPosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"decreasePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"forceCancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"forceRemovePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCilPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getOfferKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paymentMethod\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getPositionKey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakedCil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"increasePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cilStaking_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cilPair_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ethPricefeed_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiSig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"positionKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"offerredAmount\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"priceType\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"paymentMethod\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pricefeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"releaseOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pricefeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelOffer(bytes32)\":{\"details\":\"cancel offer\",\"params\":{\"key\":\"key of offer\"}},\"constructor\":{\"params\":{\"cil_\":\"cilistia token address\",\"multiSig_\":\"multi sign wallet address\"}},\"createOffer(bytes32,uint128,string)\":{\"details\":\"create offer\",\"params\":{\"amount\":\"amount to offer\",\"positionKey\":\"key of position\",\"terms\":\"terms of position\"}},\"createPosition((uint128,uint128,uint128,uint128,bool,uint8,address),string)\":{\"details\":\"create position\",\"params\":{\"params\":\"position create params\",\"terms\":\"terms of position\"}},\"decreasePosition(bytes32,uint128)\":{\"details\":\"decrease position amount\",\"params\":{\"amount\":\"amount to increase\",\"key\":\"key of position\"}},\"forceCancelOffer(bytes32)\":{\"details\":\"force cancel offer\",\"params\":{\"key\":\"key of offer\"}},\"forceRemovePosition(bytes32)\":{\"details\":\"force remove position\",\"params\":{\"key\":\"key of position\"}},\"getCilPrice()\":{\"details\":\"get cil token price from uniswap\",\"returns\":{\"_0\":\"price price of cil token\"}},\"getOfferKey(bytes32,uint256,address,uint256)\":{\"details\":\"calcualate key of position\"},\"getPositionKey(uint8,uint128,address,address,uint256,uint128,uint128,uint256)\":{\"details\":\"calcualate key of position\"},\"getStakedCil(address)\":{\"details\":\"get staking amount with eth\",\"params\":{\"user\":\"wallet address\"},\"returns\":{\"totalAmount\":\"amount of staked cil with usd\"}},\"getTokenPrice(address)\":{\"details\":\"get token price\",\"params\":{\"token\":\"address of token\"},\"returns\":{\"_0\":\"price price of token\"}},\"increasePosition(bytes32,uint128)\":{\"details\":\"increate position amount\",\"params\":{\"amount\":\"amount to increase\",\"key\":\"key of position\"}},\"init(address,address,address)\":{\"details\":\"set staking contract address\",\"params\":{\"cilPair_\":\"address of cil/eth pair\",\"cilStaking_\":\"staking contract address\",\"ethPricefeed_\":\"weth pricefeed contract address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"releaseOffer(bytes32)\":{\"details\":\"release offer\",\"params\":{\"key\":\"key of offer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPriceFeed(address,address)\":{\"details\":\"set token price feed\",\"params\":{\"pricefeed\":\"address of chainlink aggregator\",\"token\":\"address of token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Cilistia P2P MarketPlace\",\"version\":1},\"userdoc\":{\"events\":{\"AccountBlocked(address)\":{\"notice\":\"fires when block account\"},\"OfferCanceled(bytes32)\":{\"notice\":\"fires when cancel offer\"},\"OfferCreated(bytes32,bytes32,uint128,string)\":{\"notice\":\"fires when position state change\"},\"OfferReleased(bytes32)\":{\"notice\":\"fires when release offer\"},\"PositionCreated(bytes32,uint128,uint128,uint128,uint128,bool,uint8,address,address,string)\":{\"notice\":\"fires when create position\"},\"PositionUpdated(bytes32,uint128)\":{\"notice\":\"fires when update position\"}},\"kind\":\"user\",\"methods\":{\"cil()\":{\"notice\":\"cil address\"},\"cilPair()\":{\"notice\":\"uniswap router address\"},\"cilStaking()\":{\"notice\":\"cil staking address\"},\"feePoint()\":{\"notice\":\"fee decimals 2\"},\"isBlocked(address)\":{\"notice\":\"blocked address\"},\"multiSig()\":{\"notice\":\"multi sign wallet address of team\"},\"offers(bytes32)\":{\"notice\":\"offers (bytes32 => Offer)\"},\"positions(bytes32)\":{\"notice\":\"positions (bytes32 => Position)\"},\"pricefeeds(address)\":{\"notice\":\"chainlink pricefeeds (address => address)\"}},\"notice\":\"cilistia MarketPlace contract price decimals 8 percent decimals 2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/MarketPlace.sol\":\"MarketPlace\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/core/MarketPlace.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IUniswapV2Factory} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport {IUniswapV2Pair} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {ICILStaking} from \\\"./interfaces/ICILStaking.sol\\\";\\n\\n\\n\\n/**\\n * @title Cilistia P2P MarketPlace\\n * @notice cilistia MarketPlace contract\\n * price decimals 8\\n * percent decimals 2\\n */\\ncontract MarketPlace is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  struct PositionCreateParam {\\n    uint128 price;\\n    uint128 amount;\\n    uint128 minAmount;\\n    uint128 maxAmount;\\n    bool priceType; // 0 => fixed, 1 => percent\\n    uint8 paymentMethod; // 0 => BankTransfer, 1 => Other\\n    address token;\\n  }\\n\\n  struct Position {\\n    uint128 price;\\n    uint128 amount;\\n    uint128 minAmount;\\n    uint128 maxAmount;\\n    uint128 offerredAmount;\\n    bool priceType; // 0 => fixed, 1 => percent\\n    uint8 paymentMethod; // 0 => BankTransfer, 1 => Other\\n    address token;\\n    address creator;\\n  }\\n\\n  struct Offer {\\n    bytes32 positionKey;\\n    uint128 amount;\\n    address creator;\\n    bool released;\\n    bool canceled;\\n  }\\n\\n  /// @notice multi sign wallet address of team\\n  address public immutable multiSig;\\n\\n  /// @notice cil address\\n  address public immutable cil;\\n  /// @notice uniswap router address\\n  address public cilPair;\\n  /// @notice cil staking address\\n  address public cilStaking;\\n  /// @notice chainlink pricefeeds (address => address)\\n  mapping(address => address) public pricefeeds;\\n\\n  /// @notice positions (bytes32 => Position)\\n  mapping(bytes32 => Position) public positions;\\n  /// @notice offers (bytes32 => Offer)\\n  mapping(bytes32 => Offer) public offers;\\n  /// @notice fee decimals 2\\n  uint256 public feePoint = 100;\\n\\n  /// @notice blocked address\\n  mapping(address => bool) public isBlocked;\\n\\n  /// @notice fires when create position\\n  event PositionCreated(\\n    bytes32 key,\\n    uint128 price,\\n    uint128 amount,\\n    uint128 minAmount,\\n    uint128 maxAmount,\\n    bool priceType,\\n    uint8 paymentMethod,\\n    address indexed token,\\n    address indexed creator,\\n    string terms\\n  );\\n\\n  /// @notice fires when update position\\n  event PositionUpdated(bytes32 indexed key, uint128 amount);\\n\\n  /// @notice fires when position state change\\n  event OfferCreated(bytes32 offerKey, bytes32 indexed positionKey, uint128 amount, string terms);\\n\\n  /// @notice fires when cancel offer\\n  event OfferCanceled(bytes32 indexed key);\\n\\n  /// @notice fires when release offer\\n  event OfferReleased(bytes32 indexed key);\\n\\n  /// @notice fires when block account\\n  event AccountBlocked(address account);\\n\\n  /**\\n   * @param cil_ cilistia token address\\n   * @param multiSig_ multi sign wallet address\\n   */\\n  constructor(address cil_, address multiSig_) {\\n    cil = cil_;\\n    multiSig = multiSig_;\\n  }\\n\\n  modifier initialized() {\\n    require(cilStaking != address(0), \\\"MarketPlace: not initialized yet\\\");\\n    _;\\n  }\\n\\n  modifier whitelisted(address token) {\\n    if (token != cil) {\\n      require(pricefeeds[token] != address(0), \\\"MarketPlace: token not whitelisted\\\");\\n    }\\n    _;\\n  }\\n\\n  modifier noBlocked() {\\n    require(!isBlocked[msg.sender], \\\"MarketPlace: blocked address\\\");\\n    _;\\n  }\\n\\n  /// @dev calcualate key of position\\n  function getPositionKey(\\n    uint8 paymentMethod,\\n    uint128 price,\\n    address token,\\n    address creator,\\n    uint256 amount,\\n    uint128 minAmount,\\n    uint128 maxAmount,\\n    uint256 timestamp\\n  ) public pure returns (bytes32) {\\n    return\\n      keccak256(\\n        abi.encodePacked(\\n          paymentMethod,\\n          price,\\n          token,\\n          amount,\\n          minAmount,\\n          maxAmount,\\n          creator,\\n          timestamp\\n        )\\n      );\\n  }\\n\\n  /// @dev calcualate key of position\\n  function getOfferKey(\\n    bytes32 positionKey,\\n    uint256 amount,\\n    address creator,\\n    uint256 timestamp\\n  ) public pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(positionKey, amount, creator, timestamp));\\n  }\\n\\n  /**\\n   * @dev get token price\\n   * @param token address of token\\n   * @return price price of token\\n   */\\n  function getTokenPrice(address token) public view returns (uint256) {\\n    if (token == cil) {\\n      return getCilPrice();\\n    }\\n\\n    require(pricefeeds[token] != address(0), \\\"MarketPlace: token not whitelisted\\\");\\n\\n    (, int256 answer, , , ) = AggregatorV3Interface(pricefeeds[token]).latestRoundData();\\n\\n    return uint256(answer);\\n  }\\n\\n  /**\\n   * @dev get cil token price from uniswap\\n   * @return price price of cil token\\n   */\\n  function getCilPrice() public view returns (uint256) {\\n    bool isFirst = IUniswapV2Pair(cilPair).token0() == cil;\\n    (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(cilPair).getReserves();\\n\\n    uint256 ethPrice = getTokenPrice(address(0));\\n    uint256 price = isFirst\\n      ? ((ethPrice * reserve1) / reserve0)\\n      : ((ethPrice * reserve0) / reserve1);\\n\\n    return price;\\n  }\\n\\n  /**\\n   * @dev get staking amount with eth\\n   * @param user wallet address\\n   * @return totalAmount amount of staked cil with usd\\n   */\\n  function getStakedCil(address user) public view returns (uint256 totalAmount) {\\n    uint256 cilPrice = getCilPrice();\\n    totalAmount = (ICILStaking(cilStaking).lockableCil(user) * cilPrice) / 1e18;\\n  }\\n\\n  /**\\n   * @dev create position\\n   * @param params position create params\\n   * @param terms terms of position\\n   */\\n  function createPosition(PositionCreateParam memory params, string memory terms)\\n    external\\n    payable\\n    initialized\\n    whitelisted(params.token)\\n    noBlocked\\n  {\\n    bytes32 key = getPositionKey(\\n      params.paymentMethod,\\n      params.price,\\n      params.token,\\n      msg.sender,\\n      params.amount,\\n      params.minAmount,\\n      params.maxAmount,\\n      block.timestamp\\n    );\\n\\n    positions[key] = Position(\\n      params.price,\\n      params.amount,\\n      params.minAmount,\\n      params.maxAmount,\\n      0,\\n      params.priceType,\\n      params.paymentMethod,\\n      params.token,\\n      msg.sender\\n    );\\n\\n    if (params.token == address(0)) {\\n      require(params.amount == msg.value, \\\"MarketPlace: invalid eth amount\\\");\\n    } else {\\n      IERC20(params.token).transferFrom(msg.sender, address(this), params.amount);\\n    }\\n\\n    emit PositionCreated(\\n      key,\\n      params.price,\\n      params.amount,\\n      params.minAmount,\\n      params.maxAmount,\\n      params.priceType,\\n      params.paymentMethod,\\n      params.token,\\n      msg.sender,\\n      terms\\n    );\\n  }\\n\\n  /**\\n   * @dev increate position amount\\n   * @param key key of position\\n   * @param amount amount to increase\\n   */\\n  function increasePosition(bytes32 key, uint128 amount) external payable initialized noBlocked {\\n    require(positions[key].creator != address(0), \\\"MarketPlace: not exist such position\\\");\\n    require(positions[key].creator == msg.sender, \\\"MarketPlace: not owner of this position\\\");\\n\\n    positions[key].amount += amount;\\n\\n    if (positions[key].token == address(0)) {\\n      require(amount == msg.value, \\\"MarketPlace: invalid eth amount\\\");\\n    } else {\\n      IERC20(positions[key].token).transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    emit PositionUpdated(key, positions[key].amount);\\n  }\\n\\n  /**\\n   * @dev decrease position amount\\n   * @param key key of position\\n   * @param amount amount to increase\\n   */\\n  function decreasePosition(bytes32 key, uint128 amount) external initialized noBlocked {\\n    require(positions[key].creator != address(0), \\\"MarketPlace: not exist such position\\\");\\n    require(positions[key].creator == msg.sender, \\\"MarketPlace: not owner of this position\\\");\\n    require(\\n      positions[key].amount >= positions[key].offerredAmount + amount,\\n      \\\"MarketPlace: insufficient amount\\\"\\n    );\\n\\n    positions[key].amount -= amount;\\n\\n    if (positions[key].token == address(0)) {\\n      payable(msg.sender).transfer(amount);\\n    } else {\\n      IERC20(positions[key].token).transfer(msg.sender, amount);\\n    }\\n\\n    emit PositionUpdated(key, positions[key].amount);\\n  }\\n\\n  /**\\n   * @dev create offer\\n   * @param positionKey key of position\\n   * @param amount amount to offer\\n   * @param terms terms of position\\n   */\\n  function createOffer(\\n    bytes32 positionKey,\\n    uint128 amount,\\n    string memory terms\\n  ) external initialized noBlocked {\\n    require(positions[positionKey].creator != address(0), \\\"MarketPlace: such position don't exist\\\");\\n\\n    require(positions[positionKey].minAmount <= amount, \\\"MarketPlace: amount less than min\\\");\\n    require(positions[positionKey].maxAmount >= amount, \\\"MarketPlace: amount exceed max\\\");\\n\\n    uint256 lockableCil = getStakedCil(positions[positionKey].creator);\\n    require(lockableCil > amount, \\\"MarketPlace: insufficient staking amount for offer\\\");\\n\\n    uint256 decimals = 18;\\n    uint256 price = positions[positionKey].price;\\n\\n    if (positions[positionKey].token != address(0)) {\\n      decimals = IERC20Metadata(positions[positionKey].token).decimals();\\n    }\\n\\n    if (positions[positionKey].priceType) {\\n      if (positions[positionKey].token == cil) {\\n        price = (getCilPrice() * positions[positionKey].price) / 10000;\\n      } else {\\n        price =\\n          (getTokenPrice(positions[positionKey].token) * positions[positionKey].price) /\\n          10000;\\n      }\\n    }\\n\\n    uint256 tokenAmount = (amount * 10**decimals) / price;\\n    uint256 cilAmount = (amount * 1e18) / getCilPrice();\\n\\n    ICILStaking(cilStaking).lock(\\n      positions[positionKey].creator,\\n      ICILStaking(cilStaking).lockedCil(positions[positionKey].creator) + cilAmount\\n    );\\n\\n    bytes32 key = getOfferKey(positionKey, amount, msg.sender, block.timestamp);\\n\\n    positions[positionKey].offerredAmount += uint128(tokenAmount);\\n    offers[key] = Offer(positionKey, uint128(tokenAmount), msg.sender, false, false);\\n\\n    emit OfferCreated(key, positionKey, amount, terms);\\n  }\\n\\n  /**\\n   * @dev cancel offer\\n   * @param key key of offer\\n   */\\n  function cancelOffer(bytes32 key) external noBlocked {\\n    require(offers[key].creator == msg.sender, \\\"MarketPlace: you aren't creator of this offer\\\");\\n    require(!offers[key].released && !offers[key].canceled, \\\"MarketPlace: offer already finished\\\");\\n\\n    offers[key].canceled = true;\\n    positions[offers[key].positionKey].offerredAmount -= offers[key].amount;\\n\\n    emit OfferCanceled(key);\\n  }\\n\\n  /**\\n   * @dev release offer\\n   * @param key key of offer\\n   */\\n  function releaseOffer(bytes32 key) external noBlocked {\\n    bytes32 positionKey = offers[key].positionKey;\\n    require(\\n      positions[positionKey].creator == msg.sender,\\n      \\\"MarketPlace: you aren't creator of this position\\\"\\n    );\\n    require(!offers[key].released && !offers[key].canceled, \\\"MarketPlace: offer already finished\\\");\\n\\n    offers[key].released = true;\\n    positions[positionKey].amount -= offers[key].amount;\\n    positions[positionKey].offerredAmount -= offers[key].amount;\\n\\n    uint256 fee = (offers[key].amount * feePoint) / 10000;\\n    if (positions[positionKey].token == address(0)) {\\n      payable(offers[key].creator).transfer(offers[key].amount - fee);\\n      payable(multiSig).transfer(fee);\\n    } else {\\n      IERC20(positions[positionKey].token).transfer(offers[key].creator, offers[key].amount - fee);\\n      IERC20(positions[positionKey].token).transfer(multiSig, fee);\\n    }\\n\\n    emit OfferReleased(key);\\n  }\\n\\n  /**\\n   * @dev set staking contract address\\n   * @param cilStaking_ staking contract address\\n   * @param cilPair_ address of cil/eth pair\\n   * @param ethPricefeed_ weth pricefeed contract address\\n   */\\n  function init(\\n    address cilStaking_,\\n    address cilPair_,\\n    address ethPricefeed_\\n  ) external onlyOwner {\\n    cilStaking = cilStaking_;\\n    cilPair = cilPair_;\\n\\n    bool isFirst = IUniswapV2Pair(cilPair).token0() == cil;\\n    pricefeeds[address(0)] = ethPricefeed_;\\n    pricefeeds[\\n      isFirst ? IUniswapV2Pair(cilPair).token1() : IUniswapV2Pair(cilPair).token0()\\n    ] = ethPricefeed_;\\n  }\\n\\n  /**\\n   * @dev set token price feed\\n   * @param token address of token\\n   * @param pricefeed address of chainlink aggregator\\n   */\\n  function setPriceFeed(address token, address pricefeed) external onlyOwner {\\n    pricefeeds[token] = pricefeed;\\n  }\\n\\n  /**\\n   * @dev force cancel offer\\n   * @param key key of offer\\n   */\\n  function forceCancelOffer(bytes32 key) external onlyOwner {\\n    require(!offers[key].released && !offers[key].canceled, \\\"MarketPlace: offer already finished\\\");\\n\\n    offers[key].canceled = true;\\n    positions[offers[key].positionKey].offerredAmount -= offers[key].amount;\\n\\n    emit OfferCanceled(key);\\n  }\\n\\n  /**\\n   * @dev force remove position\\n   * @param key key of position\\n   */\\n  function forceRemovePosition(bytes32 key) external onlyOwner {\\n    uint256 positionAmount = positions[key].amount;\\n    isBlocked[positions[key].creator] = true;\\n    positions[key].amount = 0;\\n    ICILStaking(cilStaking).remove(positions[key].creator);\\n\\n    if (positions[key].token == address(0)) {\\n      payable(multiSig).transfer(positionAmount);\\n    } else {\\n      IERC20(positions[key].token).transfer(multiSig, positionAmount);\\n    }\\n\\n    emit PositionUpdated(key, 0);\\n    emit AccountBlocked(positions[key].creator);\\n  }\\n}\\n\",\"keccak256\":\"0xf11f021920e4d10a713b4a792be423f91a6caaec2ee78e9d68db9b55fb0fbcf8\",\"license\":\"AGPL-3.0\"},\"contracts/core/interfaces/ICILStaking.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.9;\\n\\n/// @notice cilistia staking contract interface\\ninterface ICILStaking {\\n  /// @notice fires when stake state changes\\n  event StakeUpdated(address user, uint256 stakedAmount, uint256 lockedAmount);\\n\\n  /// @notice fires when unstake token\\n  event UnStaked(address user, uint256 rewardAmount);\\n\\n  /// @dev unstake staked token\\n  function lock(address user, uint256 amount) external;\\n\\n  /// @dev remove staking data\\n  function remove(address user) external;\\n\\n  /// @dev return colleted token amount\\n  function collectedToken(address user) external view returns (uint256);\\n\\n  /// @dev return lockable token amount\\n  function lockableCil(address user) external view returns (uint256);\\n\\n  /// @dev return locked token amount\\n  function lockedCil(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9782817fa2c17ffa7b2c1c267068a4b4d646b6c0aae9fbf7e4b309cfa18e376b\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c806376e11286116100ec578063cb6ca29e1161008a578063f16e019611610064578063f16e019614610613578063f2fde38b14610628578063f952279e14610648578063fbac39511461066857600080fd5b8063cb6ca29e146105b3578063d02641a0146105d3578063ee63e515146105f357600080fd5b80639c182ef4116100c65780639c182ef41461052c5780639f6865851461054c578063b054504e1461056c578063b2c776381461057f57600080fd5b806376e11286146104ce578063813d5817146104ee5780638da5cb5b1461050e57600080fd5b806335cba5a311610159578063514ea4bf11610133578063514ea4bf1461036f5780635e35ab6a1461046357806367e0fa7f14610499578063715018a6146104b957600080fd5b806335cba5a31461025f57806336e0004a14610297578063474d3ff0146102cb57600080fd5b806309a139f0146101a157806315018126146101b6578063184b9559146101df5780632f78f766146101ff578063331106d51461021f5780633503ca151461023f575b600080fd5b6101b46101af366004612895565b6106a8565b005b3480156101c257600080fd5b506101cc60065481565b6040519081526020015b60405180910390f35b3480156101eb57600080fd5b506101b46101fa3660046128d6565b61094d565b34801561020b57600080fd5b506101cc61021a366004612921565b610bb9565b34801561022b57600080fd5b506101cc61023a36600461296f565b610c0f565b34801561024b57600080fd5b506101b461025a3660046129fe565b610cac565b34801561026b57600080fd5b5060015461027f906001600160a01b031681565b6040516001600160a01b0390911681526020016101d6565b3480156102a357600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102d757600080fd5b5061032f6102e63660046129fe565b60056020526000908152604090208054600182015460029092015490916001600160801b0316906001600160a01b0381169060ff600160a01b8204811691600160a81b90041685565b604080519586526001600160801b0390941660208601526001600160a01b039092169284019290925290151560608301521515608082015260a0016101d6565b34801561037b57600080fd5b506103fb61038a3660046129fe565b6004602081905260009182526040909120805460018201546002830154600384015493909401546001600160801b0380841695600160801b9485900482169582851695948590048316949282169392820460ff90811693600160881b90930416916001600160a01b03918216911689565b604080516001600160801b039a8b168152988a1660208a0152968916968801969096529387166060870152959091166080850152151560a084015260ff90931660c08301526001600160a01b0392831660e083015291909116610100820152610120016101d6565b34801561046f57600080fd5b5061027f61047e366004612a17565b6003602052600090815260409020546001600160a01b031681565b3480156104a557600080fd5b506101b46104b4366004612b00565b610f2a565b3480156104c557600080fd5b506101b46115e8565b3480156104da57600080fd5b506101b46104e9366004612b57565b6115fc565b3480156104fa57600080fd5b5060025461027f906001600160a01b031681565b34801561051a57600080fd5b506000546001600160a01b031661027f565b34801561053857600080fd5b506101cc610547366004612a17565b611632565b34801561055857600080fd5b506101b46105673660046129fe565b6116e2565b6101b461057a366004612b9e565b6117f3565b34801561058b57600080fd5b5061027f7f000000000000000000000000000000000000000000000000000000000000000081565b3480156105bf57600080fd5b506101b46105ce3660046129fe565b611cc0565b3480156105df57600080fd5b506101cc6105ee366004612a17565b61217e565b3480156105ff57600080fd5b506101b461060e366004612895565b612296565b34801561061f57600080fd5b506101cc6124fa565b34801561063457600080fd5b506101b4610643366004612a17565b6126a7565b34801561065457600080fd5b506101b46106633660046129fe565b612720565b34801561067457600080fd5b50610698610683366004612a17565b60076020526000908152604090205460ff1681565b60405190151581526020016101d6565b6002546001600160a01b03166106d95760405162461bcd60e51b81526004016106d090612c73565b60405180910390fd5b3360009081526007602052604090205460ff16156107095760405162461bcd60e51b81526004016106d090612ca8565b600082815260046020819052604090912001546001600160a01b03166107415760405162461bcd60e51b81526004016106d090612cdf565b600082815260046020819052604090912001546001600160a01b0316331461077b5760405162461bcd60e51b81526004016106d090612d23565b600082815260046020526040902080548291906010906107ac908490600160801b90046001600160801b0316612d80565b82546001600160801b039182166101009390930a9283029190920219909116179055506000828152600460205260409020600301546001600160a01b031661084b5734816001600160801b0316146108465760405162461bcd60e51b815260206004820152601f60248201527f4d61726b6574506c6163653a20696e76616c69642065746820616d6f756e740060448201526064016106d0565b6108f4565b6000828152600460208190526040918290206003015491516323b872dd60e01b815233918101919091523060248201526001600160801b03831660448201526001600160a01b03909116906323b872dd906064015b602060405180830381600087803b1580156108ba57600080fd5b505af11580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f29190612dab565b505b600082815260046020908152604091829020549151600160801b9092046001600160801b0316825283917f811c4b65a4c24e653571dfc74af77fcbed9f70393a9dbf2cf43c7ead82cb1435910160405180910390a25050565b6109556127cf565b600280546001600160a01b038086166001600160a01b0319928316179092556001805485841692168217905560408051630dfe168160e01b815290516000937f0000000000000000000000000000000000000000000000000000000000000000169291630dfe1681916004808301926020929190829003018186803b1580156109dd57600080fd5b505afa1580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a159190612dc8565b6000808052600360208190527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff80546001600160a01b0319166001600160a01b038881169190911790915592909216929092149250839183610afc57600160009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610abf57600080fd5b505afa158015610ad3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af79190612dc8565b610b82565b600160009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4a57600080fd5b505afa158015610b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b829190612dc8565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905550505050565b6040805160208101869052908101849052606083811b6bffffffffffffffffffffffff19169082015260748101829052600090609401604051602081830303815290604052805190602001209050949350505050565b6040516001600160f81b031960f88a901b1660208201526001600160801b0319608089811b821660218401526bffffffffffffffffffffffff1960608a811b821660318601526045850189905287831b841660658601529186901b909216607584015287901b1660858201526099810182905260009060b90160405160208183030381529060405280519060200120905098975050505050505050565b610cb46127cf565b6000818152600460208181526040808420805481850180546001600160a01b03908116885260078652848820805460ff19166001179055968890529385905281546001600160801b0390811690925560025493549251631484968760e11b815292861694830194909452600160801b9093049092169216906329092d0e90602401600060405180830381600087803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b5050506000838152600460205260409020600301546001600160a01b031615159050610de5576040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f19350505050158015610ddf573d6000803e3d6000fd5b50610ea0565b60008281526004602081905260409182902060030154915163a9059cbb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116928201929092526024810184905291169063a9059cbb90604401602060405180830381600087803b158015610e6657600080fd5b505af1158015610e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9e9190612dab565b505b6040516000815282907f811c4b65a4c24e653571dfc74af77fcbed9f70393a9dbf2cf43c7ead82cb14359060200160405180910390a26000828152600460208181526040928390209091015491516001600160a01b0390921682527f28e9b38569d728986e5868b0e113d9a49ee4c47dfc6db29a673e25b3515a56a8910160405180910390a15050565b6002546001600160a01b0316610f525760405162461bcd60e51b81526004016106d090612c73565b3360009081526007602052604090205460ff1615610f825760405162461bcd60e51b81526004016106d090612ca8565b600083815260046020819052604090912001546001600160a01b0316610ff95760405162461bcd60e51b815260206004820152602660248201527f4d61726b6574506c6163653a207375636820706f736974696f6e20646f6e277460448201526508195e1a5cdd60d21b60648201526084016106d0565b6000838152600460205260409020600101546001600160801b03808416911611156110705760405162461bcd60e51b815260206004820152602160248201527f4d61726b6574506c6163653a20616d6f756e74206c657373207468616e206d696044820152603760f91b60648201526084016106d0565b6000838152600460205260409020600101546001600160801b03808416600160801b9092041610156110e45760405162461bcd60e51b815260206004820152601e60248201527f4d61726b6574506c6163653a20616d6f756e7420657863656564206d6178000060448201526064016106d0565b600083815260046020819052604082200154611108906001600160a01b0316611632565b9050826001600160801b0316811161117d5760405162461bcd60e51b815260206004820152603260248201527f4d61726b6574506c6163653a20696e73756666696369656e74207374616b696e604482015271339030b6b7bab73a103337b91037b33332b960711b60648201526084016106d0565b600084815260046020526040902080546003909101546012916001600160801b0316906001600160a01b03161561123c5760008681526004602081815260409283902060030154835163313ce56760e01b815293516001600160a01b039091169363313ce56793818101939291829003018186803b1580156111fe57600080fd5b505afa158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190612de5565b60ff1691505b600086815260046020526040902060020154600160801b900460ff161561132f576000868152600460205260409020600301547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03908116911614156112e257600086815260046020526040902054612710906001600160801b03166112c76124fa565b6112d19190612e02565b6112db9190612e21565b905061132f565b60008681526004602052604090208054600390910154612710916001600160801b031690611318906001600160a01b031661217e565b6113229190612e02565b61132c9190612e21565b90505b60008161133d84600a612f27565b611350906001600160801b038916612e02565b61135a9190612e21565b905060006113666124fa565b61137888670de0b6b3a7640000612f33565b6001600160801b031661138b9190612e21565b60025460008a8152600460208190526040918290208101549151630923db4360e31b81526001600160a01b0392831691810182905293945091169163282d3fdf91908490849063491eda189060240160206040518083038186803b1580156113f257600080fd5b505afa158015611406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142a9190612f62565b6114349190612f7b565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561147a57600080fd5b505af115801561148e573d6000803e3d6000fd5b5050505060006114a989896001600160801b03163342610bb9565b60008a8152600460205260408120600201805492935085929091906114d89084906001600160801b0316612d80565b82546101009290920a6001600160801b038181021990931691831602179091556040805160a0810182528c8152868316602080830191825233838501908152600060608501818152608086018281528a83526005909452908690209451855592516001850180546001600160801b0319169190971617909555935160029092018054915194516001600160a01b039093166001600160a81b031990921691909117600160a01b941515949094029390931760ff60a81b1916600160a81b9115159190910217909155518a91507f10cb1b5fffaa7c030e9c405deb1c35ed8d6f61131dcb067edac2cc95d3573dbf906115d59084908c908c90612fe0565b60405180910390a2505050505050505050565b6115f06127cf565b6115fa6000612829565b565b6116046127cf565b6001600160a01b03918216600090815260036020526040902080546001600160a01b03191691909216179055565b60008061163d6124fa565b600254604051637744518760e11b81526001600160a01b038681166004830152929350670de0b6b3a7640000928492169063ee88a30e9060240160206040518083038186803b15801561168f57600080fd5b505afa1580156116a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c79190612f62565b6116d19190612e02565b6116db9190612e21565b9392505050565b6116ea6127cf565b600081815260056020526040902060020154600160a01b900460ff1615801561172c5750600081815260056020526040902060020154600160a81b900460ff16155b6117485760405162461bcd60e51b81526004016106d090613011565b60008181526005602090815260408083206002808201805460ff60a81b1916600160a81b179055600182015491548552600490935290832090910180546001600160801b0392831693919261179f91859116613054565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550807f551093dec6053933c320273f5b5e812f1ef7b496dacdb2f731e5f73fdc1d2eb960405160405180910390a250565b6002546001600160a01b031661181b5760405162461bcd60e51b81526004016106d090612c73565b8160c001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614611890576001600160a01b03818116600090815260036020526040902054166118905760405162461bcd60e51b81526004016106d09061307c565b3360009081526007602052604090205460ff16156118c05760405162461bcd60e51b81526004016106d090612ca8565b60006118f38460a0015185600001518660c001513388602001516001600160801b031689604001518a6060015142610c0f565b905060405180610120016040528085600001516001600160801b0316815260200185602001516001600160801b0316815260200185604001516001600160801b0316815260200185606001516001600160801b0316815260200160006001600160801b031681526020018560800151151581526020018560a0015160ff1681526020018560c001516001600160a01b03168152602001336001600160a01b03168152506004600083815260200190815260200160002060008201518160000160006101000a8154816001600160801b0302191690836001600160801b0316021790555060208201518160000160106101000a8154816001600160801b0302191690836001600160801b0316021790555060408201518160010160006101000a8154816001600160801b0302191690836001600160801b0316021790555060608201518160010160106101000a8154816001600160801b0302191690836001600160801b0316021790555060808201518160020160006101000a8154816001600160801b0302191690836001600160801b0316021790555060a08201518160020160106101000a81548160ff02191690831515021790555060c08201518160020160116101000a81548160ff021916908360ff16021790555060e08201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160040160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505060006001600160a01b03168460c001516001600160a01b03161415611ba9573484602001516001600160801b031614611ba45760405162461bcd60e51b815260206004820152601f60248201527f4d61726b6574506c6163653a20696e76616c69642065746820616d6f756e740060448201526064016106d0565b611c45565b60c084015160208501516040516323b872dd60e01b81523360048201523060248201526001600160801b0390911660448201526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015611c0b57600080fd5b505af1158015611c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c439190612dab565b505b336001600160a01b03168460c001516001600160a01b03167fcadac95e125194e6492648870a18ffa92da080b8dfd934e11ddcaee13059a07d838760000151886020015189604001518a606001518b608001518c60a001518c604051611cb29897969594939291906130be565b60405180910390a350505050565b3360009081526007602052604090205460ff1615611cf05760405162461bcd60e51b81526004016106d090612ca8565b600081815260056020908152604080832054808452600492839052922001546001600160a01b03163314611d7f5760405162461bcd60e51b815260206004820152603060248201527f4d61726b6574506c6163653a20796f75206172656e27742063726561746f722060448201526f37b3103a3434b9903837b9b4ba34b7b760811b60648201526084016106d0565b600082815260056020526040902060020154600160a01b900460ff16158015611dc15750600082815260056020526040902060020154600160a81b900460ff16155b611ddd5760405162461bcd60e51b81526004016106d090613011565b600082815260056020908152604080832060028101805460ff60a01b1916600160a01b17905560010154848452600490925290912080546001600160801b0392831692601091611e36918591600160801b900416613054565b82546101009290920a6001600160801b03818102199093169183160217909155600084815260056020908152604080832060010154868452600490925282206002018054918416945092611e8c91859116613054565b82546101009290920a6001600160801b0381810219909316918316021790915560065460008581526005602052604081206001015490935061271092611ed3929116612e02565b611edd9190612e21565b6000838152600460205260409020600301549091506001600160a01b0316611fc157600083815260056020526040902060028101546001909101546001600160a01b03909116906108fc90611f3c9084906001600160801b0316613121565b6040518115909202916000818181858888f19350505050158015611f64573d6000803e3d6000fd5b506040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f19350505050158015611fbb573d6000803e3d6000fd5b5061214e565b600082815260046020908152604080832060030154868452600590925290912060028101546001909101546001600160a01b039283169263a9059cbb9216906120149085906001600160801b0316613121565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561205a57600080fd5b505af115801561206e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120929190612dab565b5060008281526004602081905260409182902060030154915163a9059cbb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116928201929092526024810184905291169063a9059cbb90604401602060405180830381600087803b15801561211457600080fd5b505af1158015612128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214c9190612dab565b505b60405183907fd537159b33aede12d4abc819f5078af138803fe8729a04eae844350df82353c890600090a2505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156121c8576121c26124fa565b92915050565b6001600160a01b03828116600090815260036020526040902054166121ff5760405162461bcd60e51b81526004016106d09061307c565b6001600160a01b03808316600090815260036020526040808220548151633fabe5a360e21b815291519293169163feaf968c9160048082019260a092909190829003018186803b15801561225257600080fd5b505afa158015612266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228a9190613152565b50919695505050505050565b6002546001600160a01b03166122be5760405162461bcd60e51b81526004016106d090612c73565b3360009081526007602052604090205460ff16156122ee5760405162461bcd60e51b81526004016106d090612ca8565b600082815260046020819052604090912001546001600160a01b03166123265760405162461bcd60e51b81526004016106d090612cdf565b600082815260046020819052604090912001546001600160a01b031633146123605760405162461bcd60e51b81526004016106d090612d23565b6000828152600460205260409020600201546123869082906001600160801b0316612d80565b6000838152600460205260409020546001600160801b03918216600160801b90910490911610156123f95760405162461bcd60e51b815260206004820181905260248201527f4d61726b6574506c6163653a20696e73756666696369656e7420616d6f756e7460448201526064016106d0565b6000828152600460205260409020805482919060109061242a908490600160801b90046001600160801b0316613054565b82546001600160801b039182166101009390930a9283029190920219909116179055506000828152600460205260409020600301546001600160a01b03166124a75760405133906001600160801b03831680156108fc02916000818181858888f193505050501580156124a1573d6000803e3d6000fd5b506108f4565b60008281526004602081905260409182902060030154915163a9059cbb60e01b815233918101919091526001600160801b03831660248201526001600160a01b039091169063a9059cbb906044016108a0565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600160009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561257557600080fd5b505afa158015612589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ad9190612dc8565b6001600160a01b0316149050600080600160009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561260a57600080fd5b505afa15801561261e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264291906131b9565b506001600160701b031691506001600160701b031691506000612665600061217e565b905060008461268857826126798584612e02565b6126839190612e21565b61269d565b836126938484612e02565b61269d9190612e21565b9695505050505050565b6126af6127cf565b6001600160a01b0381166127145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106d0565b61271d81612829565b50565b3360009081526007602052604090205460ff16156127505760405162461bcd60e51b81526004016106d090612ca8565b6000818152600560205260409020600201546001600160a01b031633146116ea5760405162461bcd60e51b815260206004820152602d60248201527f4d61726b6574506c6163653a20796f75206172656e27742063726561746f722060448201526c37b3103a3434b99037b33332b960991b60648201526084016106d0565b6000546001600160a01b031633146115fa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106d0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160801b038116811461289057600080fd5b919050565b600080604083850312156128a857600080fd5b823591506128b860208401612879565b90509250929050565b6001600160a01b038116811461271d57600080fd5b6000806000606084860312156128eb57600080fd5b83356128f6816128c1565b92506020840135612906816128c1565b91506040840135612916816128c1565b809150509250925092565b6000806000806080858703121561293757600080fd5b84359350602085013592506040850135612950816128c1565b9396929550929360600135925050565b60ff8116811461271d57600080fd5b600080600080600080600080610100898b03121561298c57600080fd5b883561299781612960565b97506129a560208a01612879565b965060408901356129b5816128c1565b955060608901356129c5816128c1565b9450608089013593506129da60a08a01612879565b92506129e860c08a01612879565b915060e089013590509295985092959890939650565b600060208284031215612a1057600080fd5b5035919050565b600060208284031215612a2957600080fd5b81356116db816128c1565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff81118282101715612a6d57612a6d612a34565b60405290565b600082601f830112612a8457600080fd5b813567ffffffffffffffff80821115612a9f57612a9f612a34565b604051601f8301601f19908116603f01168101908282118183101715612ac757612ac7612a34565b81604052838152866020858801011115612ae057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600060608486031215612b1557600080fd5b83359250612b2560208501612879565b9150604084013567ffffffffffffffff811115612b4157600080fd5b612b4d86828701612a73565b9150509250925092565b60008060408385031215612b6a57600080fd5b8235612b75816128c1565b91506020830135612b85816128c1565b809150509250929050565b801515811461271d57600080fd5b600080828403610100811215612bb357600080fd5b60e0811215612bc157600080fd5b50612bca612a4a565b612bd384612879565b8152612be160208501612879565b6020820152612bf260408501612879565b6040820152612c0360608501612879565b60608201526080840135612c1681612b90565b608082015260a0840135612c2981612960565b60a082015260c0840135612c3c816128c1565b60c0820152915060e083013567ffffffffffffffff811115612c5d57600080fd5b612c6985828601612a73565b9150509250929050565b6020808252818101527f4d61726b6574506c6163653a206e6f7420696e697469616c697a656420796574604082015260600190565b6020808252601c908201527f4d61726b6574506c6163653a20626c6f636b6564206164647265737300000000604082015260600190565b60208082526024908201527f4d61726b6574506c6163653a206e6f74206578697374207375636820706f73696040820152633a34b7b760e11b606082015260800190565b60208082526027908201527f4d61726b6574506c6163653a206e6f74206f776e6572206f662074686973207060408201526637b9b4ba34b7b760c91b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006001600160801b03808316818516808303821115612da257612da2612d6a565b01949350505050565b600060208284031215612dbd57600080fd5b81516116db81612b90565b600060208284031215612dda57600080fd5b81516116db816128c1565b600060208284031215612df757600080fd5b81516116db81612960565b6000816000190483118215151615612e1c57612e1c612d6a565b500290565b600082612e3e57634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612e7e578160001904821115612e6457612e64612d6a565b80851615612e7157918102915b93841c9390800290612e48565b509250929050565b600082612e95575060016121c2565b81612ea2575060006121c2565b8160018114612eb85760028114612ec257612ede565b60019150506121c2565b60ff841115612ed357612ed3612d6a565b50506001821b6121c2565b5060208310610133831016604e8410600b8410161715612f01575081810a6121c2565b612f0b8383612e43565b8060001904821115612f1f57612f1f612d6a565b029392505050565b60006116db8383612e86565b60006001600160801b0380831681851681830481118215151615612f5957612f59612d6a565b02949350505050565b600060208284031215612f7457600080fd5b5051919050565b60008219821115612f8e57612f8e612d6a565b500190565b6000815180845260005b81811015612fb957602081850181015186830182015201612f9d565b81811115612fcb576000602083870101525b50601f01601f19169290920160200192915050565b8381526001600160801b03831660208201526060604082015260006130086060830184612f93565b95945050505050565b60208082526023908201527f4d61726b6574506c6163653a206f6666657220616c72656164792066696e69736040820152621a195960ea1b606082015260800190565b60006001600160801b038381169083168181101561307457613074612d6a565b039392505050565b60208082526022908201527f4d61726b6574506c6163653a20746f6b656e206e6f742077686974656c697374604082015261195960f21b606082015260800190565b60006101008a83526001600160801b03808b166020850152808a166040850152808916606085015280881660808501525085151560a084015260ff851660c08401528060e084015261311281840185612f93565b9b9a5050505050505050505050565b60008282101561313357613133612d6a565b500390565b805169ffffffffffffffffffff8116811461289057600080fd5b600080600080600060a0868803121561316a57600080fd5b61317386613138565b945060208601519350604086015192506060860151915061319660808701613138565b90509295509295909350565b80516001600160701b038116811461289057600080fd5b6000806000606084860312156131ce57600080fd5b6131d7846131a2565b92506131e5602085016131a2565b9150604084015163ffffffff8116811461291657600080fdfea264697066735822122007811ed173fc2b62b78d3383f50943e6069a4a566baacb0d1410e1d68049593564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelOffer(bytes32)": {
        "details": "cancel offer",
        "params": {
          "key": "key of offer"
        }
      },
      "constructor": {
        "params": {
          "cil_": "cilistia token address",
          "multiSig_": "multi sign wallet address"
        }
      },
      "createOffer(bytes32,uint128,string)": {
        "details": "create offer",
        "params": {
          "amount": "amount to offer",
          "positionKey": "key of position",
          "terms": "terms of position"
        }
      },
      "createPosition((uint128,uint128,uint128,uint128,bool,uint8,address),string)": {
        "details": "create position",
        "params": {
          "params": "position create params",
          "terms": "terms of position"
        }
      },
      "decreasePosition(bytes32,uint128)": {
        "details": "decrease position amount",
        "params": {
          "amount": "amount to increase",
          "key": "key of position"
        }
      },
      "forceCancelOffer(bytes32)": {
        "details": "force cancel offer",
        "params": {
          "key": "key of offer"
        }
      },
      "forceRemovePosition(bytes32)": {
        "details": "force remove position",
        "params": {
          "key": "key of position"
        }
      },
      "getCilPrice()": {
        "details": "get cil token price from uniswap",
        "returns": {
          "_0": "price price of cil token"
        }
      },
      "getOfferKey(bytes32,uint256,address,uint256)": {
        "details": "calcualate key of position"
      },
      "getPositionKey(uint8,uint128,address,address,uint256,uint128,uint128,uint256)": {
        "details": "calcualate key of position"
      },
      "getStakedCil(address)": {
        "details": "get staking amount with eth",
        "params": {
          "user": "wallet address"
        },
        "returns": {
          "totalAmount": "amount of staked cil with usd"
        }
      },
      "getTokenPrice(address)": {
        "details": "get token price",
        "params": {
          "token": "address of token"
        },
        "returns": {
          "_0": "price price of token"
        }
      },
      "increasePosition(bytes32,uint128)": {
        "details": "increate position amount",
        "params": {
          "amount": "amount to increase",
          "key": "key of position"
        }
      },
      "init(address,address,address)": {
        "details": "set staking contract address",
        "params": {
          "cilPair_": "address of cil/eth pair",
          "cilStaking_": "staking contract address",
          "ethPricefeed_": "weth pricefeed contract address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "releaseOffer(bytes32)": {
        "details": "release offer",
        "params": {
          "key": "key of offer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPriceFeed(address,address)": {
        "details": "set token price feed",
        "params": {
          "pricefeed": "address of chainlink aggregator",
          "token": "address of token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Cilistia P2P MarketPlace",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AccountBlocked(address)": {
        "notice": "fires when block account"
      },
      "OfferCanceled(bytes32)": {
        "notice": "fires when cancel offer"
      },
      "OfferCreated(bytes32,bytes32,uint128,string)": {
        "notice": "fires when position state change"
      },
      "OfferReleased(bytes32)": {
        "notice": "fires when release offer"
      },
      "PositionCreated(bytes32,uint128,uint128,uint128,uint128,bool,uint8,address,address,string)": {
        "notice": "fires when create position"
      },
      "PositionUpdated(bytes32,uint128)": {
        "notice": "fires when update position"
      }
    },
    "kind": "user",
    "methods": {
      "cil()": {
        "notice": "cil address"
      },
      "cilPair()": {
        "notice": "uniswap router address"
      },
      "cilStaking()": {
        "notice": "cil staking address"
      },
      "feePoint()": {
        "notice": "fee decimals 2"
      },
      "isBlocked(address)": {
        "notice": "blocked address"
      },
      "multiSig()": {
        "notice": "multi sign wallet address of team"
      },
      "offers(bytes32)": {
        "notice": "offers (bytes32 => Offer)"
      },
      "positions(bytes32)": {
        "notice": "positions (bytes32 => Position)"
      },
      "pricefeeds(address)": {
        "notice": "chainlink pricefeeds (address => address)"
      }
    },
    "notice": "cilistia MarketPlace contract price decimals 8 percent decimals 2",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/core/MarketPlace.sol:MarketPlace",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4623,
        "contract": "contracts/core/MarketPlace.sol:MarketPlace",
        "label": "cilPair",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4626,
        "contract": "contracts/core/MarketPlace.sol:MarketPlace",
        "label": "cilStaking",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4631,
        "contract": "contracts/core/MarketPlace.sol:MarketPlace",
        "label": "pricefeeds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4637,
        "contract": "contracts/core/MarketPlace.sol:MarketPlace",
        "label": "positions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(Position)4603_storage)"
      },
      {
        "astId": 4643,
        "contract": "contracts/core/MarketPlace.sol:MarketPlace",
        "label": "offers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(Offer)4614_storage)"
      },
      {
        "astId": 4647,
        "contract": "contracts/core/MarketPlace.sol:MarketPlace",
        "label": "feePoint",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4652,
        "contract": "contracts/core/MarketPlace.sol:MarketPlace",
        "label": "isBlocked",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Offer)4614_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlace.Offer)",
        "numberOfBytes": "32",
        "value": "t_struct(Offer)4614_storage"
      },
      "t_mapping(t_bytes32,t_struct(Position)4603_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct MarketPlace.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)4603_storage"
      },
      "t_struct(Offer)4614_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlace.Offer",
        "members": [
          {
            "astId": 4605,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "positionKey",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 4607,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 4609,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4611,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "released",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4613,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "canceled",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Position)4603_storage": {
        "encoding": "inplace",
        "label": "struct MarketPlace.Position",
        "members": [
          {
            "astId": 4586,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 4588,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "amount",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 4590,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "minAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 4592,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "maxAmount",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 4594,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "offerredAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 4596,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "priceType",
            "offset": 16,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 4598,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "paymentMethod",
            "offset": 17,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 4600,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "token",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4602,
            "contract": "contracts/core/MarketPlace.sol:MarketPlace",
            "label": "creator",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}